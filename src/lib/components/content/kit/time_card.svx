---
title: "Time Card"
created_at: "2025-01-22"
topics: ["svelte","ux_ui","date_time"]
excerpt: "A Svelte countdown or countup component."
seo_type: "article"
---

<script>
  import StatsCard from '$lib/components/static/tools/StatsCard.svelte';
	import PSnip from '$lib/components/content/custom/PSnip.svelte';
  // import { onMount } from 'svelte';

  let recentMonday = '2025-03-23';
    recentMonday = new Date();
    recentMonday.setDate(recentMonday.getDate() - (recentMonday.getDay() + 6) % 7);
    // format to yyyy-mm-dd
    recentMonday = recentMonday.toISOString().split('T')[0];

  let thisFriday = '2025-03-27';
    thisFriday = new Date();
    thisFriday.setDate(thisFriday.getDate() + (5 - thisFriday.getDay()) % 7);
    // format to yyyy-mm-dd
    thisFriday = thisFriday.toISOString().split('T')[0];

	let psnip1 = {
		link: 'https://redwoodartgroup.com/wp-content/uploads/2019/09/TardisVG.jpg',
		alt: 'Tardis from from the show Doctor Who by BBC in a Van Gogh art style',
		caption: `Image sourced from <a href="https://redwoodartgroup.com/wp-content/uploads/2019/09/TardisVG.jpg" target="_blank" rel="noopener noreferrer" >Redwood Art Group</a>.`,
	}

</script>

## Overview 

This is a simple Svelte component that displays a countdown or countup to a target date. It's a great way to show how much time has passed since a specific date or how much time is left until a future date.<br>
I don't know about you, but "Wibbly wobbly, timey wimey", right?

<PSnip imgData={psnip1} />

Time since Monday:

<StatsCard type="byte" target={recentMonday} />

Or your next "T.G.I.F.":

<StatsCard type="byte" target={thisFriday} />

Okay. It's time to get serious. It's the final countdown, after all.

## Setup: Part 1

Let's create a `helpers.js` file in the `src/lib/js` directory. We'll need to import the `getTimeDiff` function from this file. This function will take a target date and return the time difference between the current date and the target date.

First, a quick note about the date format. The `getTimeDiff` function expects the target date to be in the format <span class="no_wrap">`YYYY-MM-DD`.</span> If you're using a different format, you'll need to convert it to this format before passing it to the function. 

Here's the `getTimeDiff` function:
```js
/**
 * @params {number} x - Adding the leading zeros.
*/
export const digitFormat = (x) => (x < 10 ? `0${x}` : x);

/**
 * @params {string} targetStr - The target date string in 'YYYY-MM-DD' format.
 * @params {string} format - 'digit' returns a string with leading zeros, 'any other string' returns a string without leading zeros.
 * */ 
export const getTimeDiff = (targetStr = '2024-12-01', format = 'digit') => {
	let currDate = new Date();
	let targetDate = new Date(targetStr);

	// check if target date is in the future
	let diffInMillis = Math.abs(targetDate - currDate);
	if (targetDate < currDate) {
		diffInMillis = Math.abs(currDate - targetDate);
	}

	//  totdal diff by unit 
	const totalMin = Math.floor(diffInMillis / (1000 * 60));
	const totalHrs = Math.floor(diffInMillis / (1000 * 60 * 60));
	const totalDays = Math.floor(diffInMillis / (1000 * 60 * 60 * 24));
	const totalYears = Math.floor(diffInMillis / (1000 * 60 * 60 * 24 * 365));

	// remainder by unit
	const days = Math.floor((diffInMillis % (1000 * 60 * 60 * 24 * 365)) / (1000 * 60 * 60 * 24));
	const hours = Math.floor((diffInMillis % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
	const minutes = Math.floor((diffInMillis % (1000 * 60 * 60)) / (1000 * 60));
	const seconds = Math.floor((diffInMillis % (1000 * 60)) / 1000);

	let hoursFormat = hours;
	let minutesFormat = minutes;
	let secondsFormat = seconds;
	if (format === 'digit') {
		hoursFormat = digitFormat(hours);
		minutesFormat = digitFormat(minutes);
		secondsFormat = digitFormat(seconds);
	}

	return {
		totalYears,
		totalDays,
		totalHrs,
		totalMin,
		years: totalYears,
		days,
		hours: hoursFormat,
		minutes: minutesFormat,
		seconds: secondsFormat
	};
};
```

## Setup: Part 2

Next, we need to create a function to `helper.js` in order to properly format the units of time. For instance, if the difference is _"1 year, 2 days, 0 hours, 4 minutes, and 0 seconds"_, we'd want to display _"1 year, 2 days, 4 minutes"_. In some cases, we might not need that oxford comma.

The function below, `formatTimeUnits` takes an array of time values and their corresponding units, filters out the zeros, and formats the remaining pairs into a human-readable string. It also handles pluralization and proper conjunctions for the last two units! 

Alright! _Clock's ticking..._
```js
/**
 * Formats an array of time units into a human-readable string
 * @param {number[]} times - Array of time values
 * @param {string[]} units - Array of unit names corresponding to the times
 * @param {string} [sep=', '] - Separator between units (default: ', ')
 * @returns {string} Formatted time string
 */
export const formatTimeUnits = (times, units, sep = ', ') => {
	// Filter out zero values and pair non-zero times with their units
	const nonZeroPairs = times
		.map((time, index) => ({ time, unit: units[index] }))
		.filter((pair) => pair.time !== 0);

	// Handle empty case
	if (nonZeroPairs.length === 0) return '';

	// Format each unit with proper pluralization
	const formattedParts = nonZeroPairs.map((pair, index) => {
		const isLast = index === nonZeroPairs.length - 1;
		const isSecondLast = index === nonZeroPairs.length - 2;

		let separator = sep;
		if (isSecondLast && nonZeroPairs.length > 1) {
			separator = ' and ';
		} else if (isLast) {
			separator = '';
		}

		return `${pair.time} ${pair.unit}${pair.time > 1 ? 's' : ''}${separator}`;
	});

	// Join all parts and replace any remaining "and ," with just "and"
	return formattedParts.join('').replace(/, and /g, ' and ');
}
```

The output should look something like this:
```js
// Example usage:
console.log(formatTimeUnits([1, 3, 2, 2], ['day', 'hour', 'minute', 'second']));
// "1 day, 3 hours, 2 minutes and 2 seconds"

console.log(formatTimeUnits([0, 3, 2, 0], ['day', 'hour', 'minute', 'second']));
// "3 hours and 2 minutes"

console.log(formatTimeUnits([0, 3, 2, 45], ['day', 'hour', 'minute', 'second']));
// "3 hours, 2 minutes and 45 seconds"

console.log(formatTimeUnits([0, 0, 2, 0], ['day', 'hour', 'minute', 'second']));
// "2 minutes"

console.log(formatTimeUnits([0, 0, 0, 0], ['day', 'hour', 'minute', 'second']));
// "" 
```

## Our Time Card 

Alright, if we played our cards right, this should work.

Let's build our time card. Our `TimeCard.svelte` will take in a time `target` as a prop and display the Â± time difference between the current date and the target date.

```svelte
<script>
	import { blogLaunchDate } from '$lib/config.js';
	import { formatTimeUnits, getTimeDiff } from '../utils/date.js';
	import { onMount } from 'svelte';

	export let type = 'default';
	export let target = blogLaunchDate;

	let timeData = getTimeDiff(target, 'str');

	function updateTime() {
		timeData = getTimeDiff(target, 'str');
	}

	onMount(() => {
		const interval = setInterval(updateTime, 1000);

		return () => {
			clearInterval(interval);
		};
	});
</script>

<p class="stat_wrap">
	<b>
		{formatTimeUnits(
			[timeData.years, timeData.days, timeData.hours, timeData.minutes, timeData.seconds],
			['year', 'day', 'hour', 'min', 'sec'],
			', '
		)}!
	</b>
</p>

<style lang="scss">
	.stat_wrap {
		display: block;
	}
</style>
</style>
``` 